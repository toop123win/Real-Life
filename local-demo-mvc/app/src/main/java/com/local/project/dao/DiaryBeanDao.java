package com.local.project.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "diary".
*/
public class DiaryBeanDao extends AbstractDao<DiaryBean, Long> {

    public static final String TABLENAME = "diary";

    /**
     * Properties of entity DiaryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Year = new Property(1, int.class, "year", false, "YEAR");
        public final static Property Month = new Property(2, int.class, "month", false, "MONTH");
        public final static Property Day = new Property(3, int.class, "day", false, "DAY");
        public final static Property Username = new Property(4, String.class, "username", false, "USERNAME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Music = new Property(6, int.class, "music", false, "MUSIC");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
    }


    public DiaryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"diary\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"YEAR\" INTEGER NOT NULL ," + // 1: year
                "\"MONTH\" INTEGER NOT NULL ," + // 2: month
                "\"DAY\" INTEGER NOT NULL ," + // 3: day
                "\"USERNAME\" TEXT," + // 4: username
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"MUSIC\" INTEGER NOT NULL ," + // 6: music
                "\"TITLE\" TEXT," + // 7: title
                "\"CONTENT\" TEXT);"); // 8: content
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_diary__id ON \"diary\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"diary\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDay());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getMusic());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getYear());
        stmt.bindLong(3, entity.getMonth());
        stmt.bindLong(4, entity.getDay());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getMusic());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DiaryBean readEntity(Cursor cursor, int offset) {
        DiaryBean entity = new DiaryBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // year
            cursor.getInt(offset + 2), // month
            cursor.getInt(offset + 3), // day
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6), // music
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiaryBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setYear(cursor.getInt(offset + 1));
        entity.setMonth(cursor.getInt(offset + 2));
        entity.setDay(cursor.getInt(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setMusic(cursor.getInt(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DiaryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DiaryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DiaryBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
